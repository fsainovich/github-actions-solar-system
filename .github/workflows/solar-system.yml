name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        container: 
          image: node:20
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 20

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: code-coverage        
        runs-on: ubuntu-latest

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - 18
          uses: actions/setup-node@v3
          with:
            node-version: 18
        
        - name: Install dependencies
          run: npm install

        - name: Check Code Coverage
          run: npm run coverage
          continue-on-error: true

        - uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    docker:
        name: docker
        runs-on: ubuntu-latest
        needs: [code-coverage, unit-testing]
        permissions: 
          packages: write
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: GHCR Login
              uses: docker/login-action@v2.2.0
              with:
                registry: ghcr.io
                username: ${{ github.repository_owner }}
                password: ${{ secrets.GITHUB_TOKEN }}

            # - name: Docker Image Build
            #   uses: docker/build-push-action@v4
            #   with:
            #     context: .
            #     push: false
            #     tags: ${{ vars.DOCKER_HUB_USERANME }}/solar-system:${{ github.sha }}

            # - name: Docker Image Testing
            #   run: |
            #     docker images
            #     docker run --name solar-system-app -d \
            #         -p 3000:3000 \
            #         -e MONGO_URI=$MONGO_URI \
            #         -e MONGO_USERNAME=$MONGO_USERNAME \
            #         -e MONGO_PASSWORD=$MONGO_PASSWORD \
            #         ${{ vars.DOCKER_HUB_USERANME }}/solar-system:${{ github.sha }}
                
            #     export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            #     echo $IP

            #     echo Testing Image URL using wget
            #     wget - q -O - 127.0.0.1:3000/live | grep live

            - name: Container Image Push
              uses: docker/build-push-action@v4
              with:
                context: .
                push: true
                tags: ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      name: dev-deploy
      runs-on: ubuntu-latest
      needs: docker     
      #if: contains(github.ref, 'feature/')
      environment: 
        name: development
        url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      #outputs:
      #  INGRESS_HOST_OUTPUT: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Install Kubectl
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'

        - name: Set Kubeconfig File
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: Run kubectl
          run: |
            echo kubectl version --short -o yaml
          
       